<?php
/**
 * Parent Form UI class
 */
class FormUI {
  /**
   * Container for the items in this form.
   * @var array
   */
  public $items = array();

  /**
   * Create the form
   */
  public function __construct($form = array()) {
    $this->items = $form;
  }

  /**
   * Handle calling for items.
   *
   * You can call $form->[type]() to generate a form
   */
  public function __call($method, $arguments) {
    $class_name = 'FormUI' . ucfirst($method);
    if (class_exists($class_name)) {
      $instance = new $class_name();
      $instance->setOptions($arguments);
      return $instance;
    }
    throw new Exception('Method or form item does not exist: ' . $class_name);
  }

  /**
   * Add an item.
   *
   * This can be used in one of three ways:
   *
   * 1. Add a FormUIItem:
   *
   *     $item = new FormUIMarkup('<p>markup</p>');
   *     $form_ui->add('key', $item);
   *
   * 2. Use a FormUIItem generator:
   *
   *     $form_ui->add('key', $form_ui->markup('<p>markup</p>'));
   *
   * 3. For markup, you can use a shortcut:
   *
   *     $form_ui->add('key', '<p>markup</p>');
   */
  public function add($key, $item) {
    $args = func_get_args();
    $arg_count = count($args);

    switch ($arg_count) {
      case 2:
        $fieldset = NULL;
        $key = $args[0];
        $item = $args[1];
        break;
      case 3:
        $fieldset = $args[0];
        $key = $args[1];
        $item = $args[2];
        break;
    }

    if (is_string($item)) {
      $item = new FormUIMarkup($item);
    }

    if (!$fieldset) {
      $this->items[$key] = $item;
    }
    else {
      $this->items[$fieldset][$key] = $item;
    }

    return $this;
  }

  /**
   * Add a fieldset
   */
  public function addFieldset($name, $options = array()) {
    $this->items[$name] = array('#type' => 'fieldset');
    foreach ($options as $option => $value) {
      $this->items[$name]['#' . $option] = $value;
    }
    return $this;
  }

  /**
   * Append a submit handler if it doesn't already exist.
   */
  public function addSubmitHandler($handler) {
    $this->prepareSubmitHandlers();

    $submit_handlers =& $this->items['#submit'];
    if (isset($this->items['actions']['submit'])) {
      $submit_handlers =& $this->items['actions']['submit']['#submit'];
    }

    // check that we're not adding redundant submit handlers
    if (in_array($handler, $submit_handlers)) {
      return $this;
    }

    array_push($submit_handlers, $handler);
    return $this;
  }

  /**
   * Generate the Drupal compatible form API array
   */
  public function generate() {
    $form = array();
    foreach ($this->items as $key => $item) {
      if (is_array($item) && !preg_match('/^#/', $key)) {
        $form[$key] = array();
        foreach ($item as $item_key => $item_value) {
          // ignore #keys and $item_values that are arrays
          if (preg_match('/^#/', $item_key) || is_array($item_value)) {
            $form[$key][$item_key] = $item_value;
          }
          else {
            $form[$key][$item_key] = $item_value->generate();
          }
        }
      }
      else {
        if (preg_match('/^#/', $key)) {
          $form[$key] = $item;
        }
        else {
          $form[$key] = $item->generate();
        }
      }
    }
    return $form;
  }

  /**
   * Make sure the form has submit handlers.
   *
   * Used internally, not chainable.
   */
  public function prepareSubmitHandlers() {
    if (!isset($this->items['actions']['submit']) && !isset($this->items['#submit'])) {
      $this->items['#submit'] = array();
    }
  }

  /**
   * Insert a submit handler at the start of the list
   */
  public function prependSubmitHandler($handler) {
    $this->prepareSubmitHandlers();

    $submit_handlers =& $this->items['#submit'];
    if (isset($this->items['actions']['submit'])) {
      $submit_handlers =& $this->items['actions']['submit']['#submit'];
    }

    array_unshift($handler, $submit_handlers);
    return $this;
  }

  /**
   * Set a form option
   */
  public function setOption($option, $value) {
    $this->items['#' . $option] = $value;
    return $this;
  }
}
